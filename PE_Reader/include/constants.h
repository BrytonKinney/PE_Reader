#pragma once
#include "peanalyzer.h"
namespace peanalyzer
{
	namespace constants 
	{
		enum class MachineType : uint16_t
		{
			PE_IMAGE_FILE_MACHINE_I386 = 0x014c,
			PE_IMAGE_FILE_MACHINE_IA64 = 0x0200,
			PE_IMAGE_FILE_MACHINE_AMD64 = 0x8664
		};

		enum class PECharacteristics : uint16_t
		{
			PE_IMAGE_FILE_RELOCS_STRIPPED = 0x1,
			PE_IMAGE_FILE_EXECUTABLE_IMAGE,
			PE_IMAGE_FILE_LINE_NUMS_STRIPPED = 0x4,
			PE_IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x8,
			PE_IMAGE_FILE_AGGRESIVE_WS_TRIM = 0x10,
			PE_IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x20,
			PE_IMAGE_FILE_BYTES_REVERSED_LO = 0x80,
			PE_IMAGE_FILE_32BIT_MACHINE = 0x100,
			PE_IMAGE_FILE_DEBUG_STRIPPED = 0x200,
			PE_IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x400,
			PE_IMAGE_FILE_NET_RUN_FROM_SWAP = 0x800,
			PE_IMAGE_FILE_SYSTEM = 0x1000,
			PE_IMAGE_FILE_DLL = 0x2000,
			PE_IMAGE_FILE_UP_SYSTEM_ONLY = 0x4000,
			PE_IMAGE_FILE_BYTES_REVERSED_HI = 0x8000
		};
		
		enum class PEBitness : uint16_t
		{
			PE_IMAGE_NT_OPTIONAL_MAGIC_32 = 0x10B,
			PE_IMAGE_NT_OPTIONAL_MAGIC_64 = 0x20b,
			PE_IMAGE_ROM_OPTIONAL_MAGIC = 0x107
		};

		enum class Subsystem : uint16_t
		{
			PE_IMAGE_SUBSYSTEM_UNKNOWN,
			PE_IMAGE_SUBSYSTEM_NATIVE,
			PE_IMAGE_SUBSYSTEM_WINDOWS_GUI,
			PE_IMAGE_SUBSYSTEM_WINDOWS_CUI,
			PE_IMAGE_SUBSYSTEM_OS2_CUI,
			PE_IMAGE_SUBSYSTEM_POSIX_CUI,
			PE_IMAGE_SUBSYSTEM_NATIVE_WINDOWS,
			PE_IMAGE_SUBSYSTEM_WINDOWS_CE_GUI,
			PE_IMAGE_SUBSYSTEM_EFI_APPLICATION,
			PE_IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER,
			PE_IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER,
			PE_IMAGE_SUBSYSTEM_EFI_ROM,
			PE_IMAGE_SUBSYSTEM_XBOX,
			PE_IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION
		};

		enum class DllCharacteristics : uint16_t
		{
			PE_IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 0x0040,
			PE_IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 0x0080,
			PE_IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 0x0100,
			PE_IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 0x0200,
			PE_IMAGE_DLLCHARACTERISTICS_NO_SEH = 0x0400,
			PE_IMAGE_DLLCHARACTERISTICS_NO_BIND = 0x0800,
			PE_IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 0x2000,
			PE_IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000
		};

		enum class SectionCharacteristics : uint32_t
		{
			PE_IMAGE_SCN_TYPE_NO_PAD = 0x8,
			PE_IMAGE_SCN_CNT_CODE = 0x20,
			PE_IMAGE_SCN_CNT_INITIALIZED_DATA = 0x00000040,
			PE_IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x00000080,
			PE_IMAGE_SCN_LNK_OTHER = 0x00000100,
			PE_IMAGE_SCN_LNK_INFO = 0x00000200,
			PE_IMAGE_SCN_LNK_REMOVE = 0x00000800,
			PE_IMAGE_SCN_LNK_COMDAT = 0x00001000,
			PE_IMAGE_SCN_GPREL = 0x00008000,
			PE_IMAGE_SCN_MEM_PURGEABLE = 0x00020000,
			PE_IMAGE_SCN_MEM_16BIT = 0x00020000,
			PE_IMAGE_SCN_MEM_LOCKED = 0x00040000,
			PE_IMAGE_SCN_MEM_PRELOAD = 0x00080000,
			PE_IMAGE_SCN_ALIGN_1BYTES = 0x00100000,
			PE_IMAGE_SCN_ALIGN_2BYTES = 0x00200000,
			PE_IMAGE_SCN_ALIGN_4BYTES = 0x00300000,
			PE_IMAGE_SCN_ALIGN_8BYTES = 0x00400000,
			PE_IMAGE_SCN_ALIGN_16BYTES = 0x00500000,
			PE_IMAGE_SCN_ALIGN_32BYTES = 0x00600000,
			PE_IMAGE_SCN_ALIGN_64BYTES = 0x00700000,
			PE_IMAGE_SCN_ALIGN_128BYTES = 0x00800000,
			PE_IMAGE_SCN_ALIGN_256BYTES = 0x00900000,
			PE_IMAGE_SCN_ALIGN_512BYTES = 0x00A00000,
			PE_IMAGE_SCN_ALIGN_1024BYTES = 0x00B00000,
			PE_IMAGE_SCN_ALIGN_2048BYTES = 0x00C00000,
			PE_IMAGE_SCN_ALIGN_4096BYTES = 0x00D00000,
			PE_IMAGE_SCN_ALIGN_8192BYTES = 0x00E00000,
			PE_IMAGE_SCN_LNK_NRELOC_OVFL = 0x01000000,
			PE_IMAGE_SCN_MEM_DISCARDABLE = 0x02000000,
			PE_IMAGE_SCN_MEM_NOT_CACHED = 0x04000000,
			PE_IMAGE_SCN_MEM_NOT_PAGED = 0x08000000,
			PE_IMAGE_SCN_MEM_SHARED = 0x10000000,
			PE_IMAGE_SCN_MEM_EXECUTE = 0x20000000,
			PE_IMAGE_SCN_MEM_READ = 0x40000000,
			PE_IMAGE_SCN_MEM_WRITE = 0x80000000,
		};

		const char DataDirectories[16][27] =
		{
			"Export Table",
			"Import Table",
			"Resource Table",
			"Exception Table",
			"Certificate Table",
			"Base Relocation Table",
			"Debugging Information",
			"Architecture-specific Data",
			"Global Pointer Register",
			"Thread-local Storage Table",
			"Load Configuration Table",
			"Bound Import Table",
			"Import Address Table",
			"Delay Import Descriptor",
			"CLR Header",
			"Reserved"
		};

		enum class OpCodes : uint8_t
		{
			PREFIX_LOCK = 0xF0,
			PREFIX_REPNE = 0xF2,
			PREFIX_REPNZ = 0xF2,
			PREFIX_REPE = 0xF3,
			PREFIX_REPZ = 0xF3,
			PREFIX_POPCNT = 0xF3,
			PREFIX_LZCNT = 0xF3,
			PREFIX_ADOX = 0xF3,
			PREFIX_OVERRIDE_CS = 0x2E,
			PREFIX_OVERRIDE_SS = 0x36,
			PREFIX_OVERRIDE_DS = 0x3E,
			PREFIX_OVERRIDE_ES = 0x26,
			PREFIX_OVERRIDE_FS = 0x64,
			PREFIX_OVERRIDE_GS = 0x65,
		};
	}
}

std::ostream& operator << (std::ostream& out, const peanalyzer::constants::MachineType value);
std::ostream& operator << (std::ostream& out, const peanalyzer::constants::PEBitness value);
std::ostream& operator << (std::ostream& out, const peanalyzer::constants::Subsystem value);